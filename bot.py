import telebot
import random
import datetime
import time 
from telebot import types

# --- –ù–û–í–û–ï –î–õ–Ø RENDER (v17) ---
import os
from flask import Flask
from threading import Thread
# --- –ö–æ–Ω–µ—Ü v17 ---

# --- –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather ---
# !!! –í–ê–ñ–ù–û: –ú—ã –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ –ø—É—Å—Ç—ã–º, —Ç–∞–∫ –∫–∞–∫ Render –¥–æ–±–∞–≤–∏—Ç —Ç–æ–∫–µ–Ω —Å–∞–º
BOT_TOKEN = os.environ.get('BOT_TOKEN') 
# ----------------------------------------------

# --- –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- –ò–î–ï–Ø ‚Ññ5: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ú–ï–ù–Æ –ö–û–ú–ê–ù–î (–∫–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é") ---
try:
    bot_commands = [
        types.BotCommand("start", "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç / –ò–≥—Ä—ã"),
        types.BotCommand("groupstats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä"),
        types.BotCommand("go", "üì£ –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å (–ö—Ç–æ –∏–¥–µ—Ç?)") 
    ]
    
    # –ú–µ–Ω—é –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Render
    bot.set_my_commands(bot_commands) 
    
    print("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ (–≤–æ–∑–º–æ–∂–Ω–æ) –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")
# -----------------------------------------------------------


# --- –ù–∞—à–∏ "—Ö—Ä–∞–Ω–∏–ª–∏—â–∞" –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ ---
user_daily_stats = {} # –î–ª—è "–ì—Ä–∞–¥—É—Å–Ω–∏–∫–∞" –∏ "–†—É–ª–µ—Ç–∫–∏"

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ (v17) ---
polls_data = {}       # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { message_id: {'question': '...', 'creator_id': ..., 'going': {user_id: 'name'}, 'not_going': {user_id: 'name'}} }
# --- –ö–æ–Ω–µ—Ü v17 ---


# --- –¢–µ–∫—Å—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ---
MAIN_MENU_TEXT = "–î–æ–∫–∞–∂–∏, –∫—Ç–æ —Ç—É—Ç –ª–æ—à–∞—Ä–∞:"

# --- –ò–î–ï–Ø ‚Ññ2: –§—É–Ω–∫—Ü–∏–∏ "–ì—Ä–∞–¥—É—Å–Ω–∏–∫–∞" ---

def get_krasavchik_comment(percent):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—à–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫—Ä–∞—Å–æ—Ç—ã."""
    if percent <= 20:
        return f"–°–µ–≥–æ–¥–Ω—è —è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –Ω–∞ {percent}%... üòÖ (–õ—É—á—à–µ –±–µ–∑ –∑–µ—Ä–∫–∞–ª–∞)"
    elif percent <= 50:
        return f"–°–µ–≥–æ–¥–Ω—è —è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –Ω–∞ {percent}%! üòé (–í–ø–æ–ª–Ω–µ —Å–µ–±–µ, —Å–æ–π–¥–µ—Ç)"
    elif percent <= 80:
        return f"–°–µ–≥–æ–¥–Ω—è —è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –Ω–∞ {percent}%! üî• (–ó–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ø–µ—Ö!)"
    else: # 81-100
        return f"–°–µ–≥–æ–¥–Ω—è —è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –Ω–∞ {percent}%! üëë (–î–ê –¢–´ –ö–û–†–û–õ–¨!)"

def get_loh_comment(percent):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—à–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ "–ª–æ—Ö–∞"."""
    if percent <= 20:
        return f"–°–µ–≥–æ–¥–Ω—è —è –ª–æ—Ö –≤—Å–µ–≥–æ –Ω–∞ {percent}%! üéâ (–¢—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!)"
    elif percent <= 50:
        return f"–°–µ–≥–æ–¥–Ω—è —è –ª–æ—Ö –Ω–∞ {percent}%. (–ù—É, –±—ã–≤–∞–µ—Ç –∏ —Ö—É–∂–µ...)"
    elif percent <= 80:
        return f"–°–µ–≥–æ–¥–Ω—è —è –ª–æ—Ö –Ω–∞ {percent}%... üò¨ (–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ, –µ—Å—Ç—å —Ä–∏—Å–∫–∏)"
    else: # 81-100
        return f"–°–µ–≥–æ–¥–Ω—è —è –ª–æ—Ö –Ω–∞ {percent}%! ü§¶‚Äç‚ôÇÔ∏è (–ö–û–ú–ë–û! –õ—É—á—à–µ –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å)"

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—è" (v16) ---
def get_size_comment(cm):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—à–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞."""
    if cm <= 5:
        return f"–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è {cm} —Å–º... üî¨ (–ú–∏–∫—Ä–æ—Å–∫–æ–ø –≤ —Å—Ç—É–¥–∏—é!)"
    elif cm <= 10:
        return f"–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è {cm} —Å–º. (–°–∫—Ä–æ–º–Ω–µ–Ω—å–∫–æ, –Ω–æ —Å–æ –≤–∫—É—Å–æ–º)"
    elif cm <= 18:
        return f"–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è {cm} —Å–º! üìè (–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞!)"
    elif cm <= 25:
        return f"–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è {cm} —Å–º! üî• (–û–≥–æ! –í–ø–µ—á–∞—Ç–ª—è–µ—Ç!)"
    else: # 26-30
        return f"–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è {cm} —Å–º! ü¶Ñ (–ì–ò–ì–ê–ù–¢! –¢—ã —Å—É—â–µ—Å—Ç–≤—É–µ—à—å?!)"


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é (v16) ---
def create_main_menu_markup():
    markup = types.InlineKeyboardMarkup(row_width=2) 
    btn1 = types.InlineKeyboardButton(
        "–ö—Ä–∞—Å–∞–≤—á–∏–∫ üòé", 
        callback_data="ask_krasavchik"
    )
    btn2 = types.InlineKeyboardButton(
        "–õ–æ—Ö üòÖ", 
        callback_data="ask_loh"
    )
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—è"
    btn5 = types.InlineKeyboardButton(
        "–ú–æ–π —Ä–∞–∑–º–µ—Ä üçÜ", 
        callback_data="ask_size"
    )
    btn3 = types.InlineKeyboardButton(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è", 
        callback_data="show_group_stats"
    )
    btn4 = types.InlineKeyboardButton(
        "üá∫üá¶ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞", 
        callback_data="roulette_play_next" 
    )
    
    markup.add(btn1, btn2, btn5, btn3, btn4)
    return markup

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ---
@bot.message_handler(commands=['start', 'play'])
def send_choice_menu(message):
    bot.send_message(
        message.chat.id, 
        "–ù—É —á–µ —á–µ–ø—É—à–∏–ª–∏, –ø–æ–∏–≥—Ä–∞–µ–º?", 
    )
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.send_message(
        message.chat.id, 
        MAIN_MENU_TEXT, 
        reply_markup=create_main_menu_markup()
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /groupstats (v16) ---
@bot.message_handler(commands=['groupstats'])
def send_group_stats(message):
    chat_id = message.chat.id
    today_str = str(datetime.date.today())

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞
        if message.chat.type == "private":
            bot.send_message(chat_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å *—Å–≤–æ–∏* –ø—Ä–æ—Ü–µ–Ω—Ç—ã.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ —ç—Ç–æ–º—É —á–∞—Ç—É
        if chat_id not in user_daily_stats or user_daily_stats[chat_id]['date'] != today_str:
            bot.send_message(chat_id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today_str} –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞. \n–ù–∞–∂–º–∏—Ç–µ /start –∏ —Å—ã–≥—Ä–∞–π—Ç–µ!")
            return
            
        # –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        stats_for_this_chat_dict = user_daily_stats[chat_id]['users']
        
        if not stats_for_this_chat_dict:
            bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ. \n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!")
            return
            
        # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        report_lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ì–† –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞ {today_str}:\n"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ "–∫—Ä–∞—Å–∞–≤—á–∏–∫—É"
        sorted_users_list = sorted(stats_for_this_chat_dict.items(), key=lambda item: item[1]['krasavchik'], reverse=True)
        
        for user_id, data in sorted_users_list:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º .replace() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ HTML
            user_name_safe = data['name'].replace('<', '&lt;').replace('>', '&gt;')
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä—É–ª–µ—Ç–∫–µ
            best_streak = data.get('roulette_best_streak', 0)
            roulette_stat_str = ""
            if best_streak > 0:
                roulette_stat_str = f" | –†—É–ª–µ—Ç–∫–∞: üèÜ {best_streak} –ø–æ–¥—Ä—è–¥"
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ "–†–∞–∑–º–µ—Ä—É"
            size = data.get('size', 0)
            size_stat_str = ""
            if size > 0:
                size_stat_str = f" | –†–∞–∑–º–µ—Ä: üçÜ {size} —Å–º"

            report_lines.append(f" - <b>{user_name_safe}</b>: –ö—Ä–∞—Å–∞–≤—á–∏–∫ {data['krasavchik']}%, –õ–æ—Ö {data['loh']}%{size_stat_str}{roulette_stat_str}")
            
        # 2. –ù–∞—Ö–æ–¥–∏–º "–ö–æ—Ä–æ–ª–µ–π"
        king_data = max(stats_for_this_chat_dict.values(), key=lambda user_data: user_data['krasavchik'])
        loser_data = max(stats_for_this_chat_dict.values(), key=lambda user_data: user_data['loh'])
        
        # 3. –ì–æ—Ç–æ–≤–∏–º –∏–º–µ–Ω–∞ –¥–ª—è HTML
        king_name_safe = king_data['name'].replace('<', '&lt;').replace('>', '&gt;')
        loser_name_safe = loser_data['name'].replace('<', '&lt;').replace('>', '&gt;')
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –≤ –æ—Ç—á–µ—Ç
        report_lines.append(f"\nüëë <b>–¶–∞—Ä—å –ö—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</b> {king_name_safe} ({king_data['krasavchik']}%)")
        report_lines.append(f"ü§¶‚Äç‚ôÇÔ∏è <b>–ì–ª–∞–≤–Ω—ã–π –õ–æ—Ö –¥–Ω—è:</b> {loser_name_safe} ({loser_data['loh']}%)")

        # –ù–∞—Ö–æ–¥–∏–º "–ö–æ—Ä–æ–ª—è –£–¥–∞—á–∏"
        luckiest_data = max(stats_for_this_chat_dict.values(), key=lambda user_data: user_data.get('roulette_best_streak', 0))
        if luckiest_data.get('roulette_best_streak', 0) > 0:
            luckiest_name_safe = luckiest_data['name'].replace('<', '&lt;').replace('>', '&gt;')
            report_lines.append(f"üèÜ <b>–ö–æ—Ä–æ–ª—å –£–¥–∞—á–∏:</b> {luckiest_name_safe} (–≤—ã–∂–∏–ª {luckiest_data['roulette_best_streak']} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥!)")

        # –ù–∞—Ö–æ–¥–∏–º "–ì–ª–∞–≤–Ω–æ–≥–æ –ì–∏–≥–∞–Ω—Ç–∞"
        biggest_data = max(stats_for_this_chat_dict.values(), key=lambda user_data: user_data.get('size', 0))
        if biggest_data.get('size', 0) > 0:
            biggest_name_safe = biggest_data['name'].replace('<', '&lt;').replace('>', '&gt;')
            report_lines.append(f"üçÜ <b>–ì–ª–∞–≤–Ω—ã–π –ì–∏–≥–∞–Ω—Ç:</b> {biggest_name_safe} ({biggest_data['size']} —Å–º)")
            
        bot.send_message(chat_id, "\n".join(report_lines), parse_mode="HTML")

    except Exception as e:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–≤ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
        print(f"!!! –û–®–ò–ë–ö–ê –≤ send_group_stats: {e}")
        bot.send_message(message.chat.id, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ (v17) ---
# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ü–†–û–°–û–í /go (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù) ---

def format_poll_text(poll_data):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ï–ö–°–¢–ê –æ–ø—Ä–æ—Å–∞
    —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏–º–µ–Ω.
    """
    question = poll_data['question']
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–º–µ–Ω
    names_going = [name.replace('<', '&lt;').replace('>', '&gt;') for name in poll_data['going'].values()]
    names_not_going = [name.replace('<', '&lt;').replace('>', '&gt;') for name in poll_data['not_going'].values()]
    
    text_going = " - (–ø–æ–∫–∞ –Ω–µ—Ç)"
    if names_going:
        text_going = "\n".join([f" - <b>{name}</b>" for name in names_going])
        
    text_not_going = " - (–ø–æ–∫–∞ –Ω–µ—Ç)"
    if names_not_going:
        text_not_going = "\n".join([f" - {name}" for name in names_not_going]) # –ú–µ–Ω–µ–µ –≤–∞–∂–Ω–æ, –Ω–µ –≤—ã–¥–µ–ª—è–µ–º
        
    final_text = f"üì£ <b>–û–ü–†–û–°:</b> {question.replace('<', '&lt;').replace('>', '&gt;')}\n" \
                 f"--------------------\n" \
                 f"üëç <b>–ò–¥—É—Ç ({len(names_going)}):</b>\n{text_going}\n\n" \
                 f"üëé <b>–ü–∞—Å ({len(names_not_going)}):</b>\n{text_not_going}"
                 
    return final_text

def create_poll_markup(poll_data):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–ù–û–ü–û–ö –æ–ø—Ä–æ—Å–∞
    (—Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–µ –º–µ–Ω—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏, –æ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ)
    """
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_go = types.InlineKeyboardButton(f"–Ø –∏–¥—É! üëç", callback_data="poll_go")
    btn_pass = types.InlineKeyboardButton(f"–Ø –ø–∞—Å üëé", callback_data="poll_pass")
    btn_close = types.InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–æ—Å", callback_data="poll_close")
    markup.add(btn_go, btn_pass, btn_close)
    return markup

@bot.message_handler(commands=['go'])
def create_poll_handler(message):
    chat_id = message.chat.id
    creator_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ /go )
    question = message.text[len('/go '):].strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
    if not question:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å! \n–ü—Ä–∏–º–µ—Ä: `/go –ö—Ç–æ –∏–¥–µ—Ç –≤ –∫–∏–Ω–æ?`", parse_mode="Markdown")
        return
        
    try:
        # 1. –°–æ–∑–¥–∞–µ–º "–ø—É—Å—Ç—ã–µ" –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞
        poll_data = {
            'question': question,
            'creator_id': creator_id,
            'going': {}, # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å {user_id: 'name'}
            'not_going': {} # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å {user_id: 'name'}
        }
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        poll_text = format_poll_text(poll_data)
        markup = create_poll_markup(poll_data)
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º
        poll_message = bot.send_message(chat_id, poll_text, parse_mode="HTML", reply_markup=markup)
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–æ—Å –≤ –Ω–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∏—Å–ø–æ–ª—å–∑—É—è ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∫–ª—é—á
        polls_data[poll_message.message_id] = poll_data
        
    except Exception as e:
        print(f"!!! –û–®–ò–ë–ö–ê –≤ create_poll_handler: {e}")
        bot.send_message(chat_id, "–û–π, –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å...")

# --- –ö–æ–Ω–µ—Ü v17 ---


# --- –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢—á–∏–∫ –ö–ù–û–ü–û–ö (–ò–ó–ú–ï–ù–ï–ù v17) ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
    """
    
    # 1. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø–∞–ª–∏ "—á–∞—Å–∏–∫–∏"
    # (–∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ —Å –æ–ø—Ä–æ—Å–æ–º, —Ç–∞–º —Å–ø–µ—Ü-–æ—Ç–≤–µ—Ç)
    
    today_str = str(datetime.date.today())
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_name = call.from_user.first_name 

    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ (v17) ---
        # --- –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–†–û–°–ê (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ê) ---
        if call.data.startswith('poll_'):
            
            # 1. –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ (–ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è)
            poll_data = polls_data.get(message_id)
            if not poll_data:
                # –≠—Ç–æ —Å—Ç–∞—Ä—ã–π –æ–ø—Ä–æ—Å, –∫–Ω–æ–ø–∫–∏ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
                bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
                return

            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
            if call.data == "poll_go":
                poll_data['going'][user_id] = user_name
                poll_data['not_going'].pop(user_id, None) # –£–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª
                bot.answer_callback_query(call.id, "–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å! üëç")
                
            elif call.data == "poll_pass":
                poll_data['not_going'][user_id] = user_name
                poll_data['going'].pop(user_id, None) # –£–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª
                bot.answer_callback_query(call.id, "–í—ã '–ø–∞—Å—É–µ—Ç–µ' üëé")
                
            elif call.data == "poll_close":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
                if user_id != poll_data['creator_id']:
                    bot.answer_callback_query(call.id, "–ó–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–æ—Å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å!", show_alert=True)
                    return
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å
                final_text = format_poll_text(poll_data) # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∏–º–µ–Ω–∞–º–∏
                final_text = f"**–û–ü–†–û–° –ó–ê–í–ï–†–®–ï–ù:**\n{final_text}" # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                             
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=final_text, parse_mode="HTML", reply_markup=None)
                # –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏
                del polls_data[message_id]
                return

            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –¢–ï–ö–°–¢ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –∏–º–µ–Ω
            new_text = format_poll_text(poll_data)
            new_markup = create_poll_markup(poll_data)
            
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=new_text, parse_mode="HTML", reply_markup=new_markup)
            except telebot.apihelper.ApiTelegramException as e:
                if "message is not modified" in str(e):
                    pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 —Ä–∞–∑–∞ –Ω–∞–∂–∞–ª –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
                else:
                    raise e # –ü–æ–¥–Ω–∏–º–∞–µ–º –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É
            return # –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. —ç—Ç–æ –±—ã–ª –æ–ø—Ä–æ—Å
            
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –û–ü–†–û–°–û–í (v17) ---

        # (–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –æ–ø—Ä–æ—Å–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ)
        bot.answer_callback_query(call.id)
        
        # --- –ò–î–ï–Ø ‚Ññ3 + –ò–î–ï–Ø ‚Ññ5: –õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –≥—Ä—É–ø–ø—ã) ---
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ß–ê–¢–ê
        if chat_id not in user_daily_stats:
            user_daily_stats[chat_id] = {'date': today_str, 'users': {}}
            
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ –¥–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ß–ê–¢–ê
        if user_daily_stats[chat_id]['date'] != today_str:
            user_daily_stats[chat_id] = {'date': today_str, 'users': {}}
            
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø % –≤ –≠–¢–û–ú –ß–ê–¢–ï
        if user_id not in user_daily_stats[chat_id]['users']:
            user_daily_stats[chat_id]['users'][user_id] = {
                'krasavchik': random.randint(0, 100),
                'loh': random.randint(0, 100),
                'name': user_name,
                'size': random.randint(1, 30), # –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞–∑–º–µ—Ä–∞
                'roulette_best_streak':
